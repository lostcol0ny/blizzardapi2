# This workflow will install Python dependencies, run tests, lint, and publish beta releases
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: ["main"]

jobs:
  checkout:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for setuptools_scm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"

  publish:
    needs: checkout
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"

      - name: Build and publish to PyPI
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools_scm
          # Get the current version from pyproject.toml
          CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          # Split version into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          # Increment minor version
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
          # Update version in package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json
          python -m build
          twine upload dist/* --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref == 'refs/heads/main' && success()
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"
          npm install

      - name: Configure Git
        run: |
          git config user.name "Github Actions"
          git config user.email "github-actions@github.com"

      - name: Run release-it
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx release-it --verbose
